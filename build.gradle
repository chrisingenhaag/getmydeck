plugins {
	id 'org.springframework.boot' version '3.2.4'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'java'
	id 'net.researchgate.release' version '3.0.2'
	id 'jacoco'
}

group = 'de.ingenhaag'

java {
	sourceCompatibility = JavaVersion.VERSION_21
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-api:2.4.0'

	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:mongodb'
	testImplementation 'de.cronn:validation-file-assertions:0.7.0'
	testImplementation 'org.wiremock:wiremock-standalone:3.4.2'
}

tasks.named('test') {
	useJUnitPlatform()
}

bootBuildImage {
	imageName = "registry.gitlab.com/cin/${project.name}:${project.version}"
	tags = ["registry.gitlab.com/cin/${project.name}:${System.getenv("CI_COMMIT_BRANCH")}"]
	publish = !project.version.contains("-SNAPSHOT")
	docker {
		publishRegistry {
			url = System.getenv("CI_REGISTRY") ?: "n/a"
			username = System.getenv("CI_REGISTRY_USER") ?: "n/a"
			password = System.getenv("CI_REGISTRY_PASSWORD") ?: "n/a"
		}
	}
}

release {
	buildTasks.add('bootBuildImage')
	git {
		requireBranch.set('main')
		pushOptions.add("-o ci.skip")
	}
}



test {
	finalizedBy jacocoTestReport, jacocoTestCoverageVerification
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		csv.required = false
		html.required = true
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.80
				counter = 'LINE'
			}
		}
	}
}


